#! /usr/bin/python

import errno
import os
import multiprocessing
import re
import subprocess
import shutil
import sys
import time
import traceback


OUT_DN = "out"

def mkdir_p(path):
	try:
		os.makedirs(path)
	except OSError as exc: # Python >2.5
		if exc.errno == errno.EEXIST and os.path.isdir(path):
			pass
		else: raise

class HostCmd:
	def __init__(self, hn):
		self.hn = hn
		self.cmd = None

	def __str__(self):
		return self.hn

	def SetCmd(self, argv):
		self.cmd = ""
		for i in range(len(argv)):
			if i == 0:
				self.cmd += "rsync"
			else:
				self.cmd += argv[i]
			self.cmd += " "
		self.cmd = re.sub("REMOTE", self.hn, self.cmd)

	def Run(self):
		out = subprocess.check_output(self.cmd, stderr=subprocess.STDOUT, shell=True)
		fo = open(OUT_DN + "/" + self.hn, "w")
		fo.write(out)
		fo.close()


def get_host_list(argv):
	host_cmd_list = []
	file = open("host-list")
	while True:
		line = file.readline()
		if not line:
			break
		if line[0] == "#":
			continue
		line = line.strip()
		if len(line) == 0:
			continue
		host_cmd_list.append(HostCmd(line))
	for hc in host_cmd_list:
		hc.SetCmd(argv)
	#print "\n".join(map(str, host_cmd_list))
	return host_cmd_list


def subp_runcmd(hostcmd):
	out = subprocess.check_output(hostcmd.cmd, stderr=subprocess.STDOUT, shell=True)
	fo = open(OUT_DN + "/" + hostcmd.hn, "w")
	fo.write(out)
	fo.close()
	print "  " + hostcmd.hn


def run_parallel(host_cmd_list):
	jobs = []
	for hc in host_cmd_list:
		p = multiprocessing.Process(target=subp_runcmd, args=(hc,))
		jobs.append(p)
		p.start()
	for j in jobs:
		j.join()


def check_output():
	for fn in os.listdir(OUT_DN):
		pn = os.path.join(OUT_DN, fn)
		print "[%s]" % pn
		print open(pn).read()
		print ""


def main(argv):
	if len(argv) <= 1:
		sys.exit("Usage: %s options local_file_or_dir REMOTE:remote_location\n"
				"  ex: %s -av root/.config REMOTE:" % (argv[0], argv[0]))
	try:
		host_cmd_list = get_host_list(argv)
		shutil.rmtree(OUT_DN)
		#os.removedirs(OUT_DN)
		mkdir_p(OUT_DN)
		run_parallel(host_cmd_list)
		check_output()
	except:
		print "".join(traceback.format_exception(sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]))


if __name__ == "__main__":
	sys.exit(main(sys.argv))
